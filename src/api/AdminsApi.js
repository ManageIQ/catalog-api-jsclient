/**
 * Catalog API
 * This API gets and orders catalog items from different cloud sources.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddPortfolioItem from '../model/AddPortfolioItem';
import CreatePortfolioItem from '../model/CreatePortfolioItem';
import Order from '../model/Order';
import OrderItem from '../model/OrderItem';
import OrderItemsCollection from '../model/OrderItemsCollection';
import OrdersCollection from '../model/OrdersCollection';
import Portfolio from '../model/Portfolio';
import PortfolioItem from '../model/PortfolioItem';
import PortfolioItemsCollection from '../model/PortfolioItemsCollection';
import PortfoliosCollection from '../model/PortfoliosCollection';
import ProgressMessagesCollection from '../model/ProgressMessagesCollection';
import ProviderControlParameters from '../model/ProviderControlParameters';
import ServicePlan from '../model/ServicePlan';
import ShareInfo from '../model/ShareInfo';
import SharePolicy from '../model/SharePolicy';
import UnsharePolicy from '../model/UnsharePolicy';

/**
* Admins service.
* @module api/AdminsApi
* @version 0.1.0
*/
export default class AdminsApi {

    /**
    * Constructs a new AdminsApi. 
    * @alias module:api/AdminsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a portfolio item to a portfolio
     * Adds a new portfolio item to an existing portfolio. 
     * @param {String} portfolioId The Portfolio ID
     * @param {module:model/AddPortfolioItem} addPortfolioItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addPortfolioItemToPortfolioWithHttpInfo(portfolioId, addPortfolioItem) {
      let postBody = addPortfolioItem;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling addPortfolioItemToPortfolio");
      }

      // verify the required parameter 'addPortfolioItem' is set
      if (addPortfolioItem === undefined || addPortfolioItem === null) {
        throw new Error("Missing the required parameter 'addPortfolioItem' when calling addPortfolioItemToPortfolio");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/portfolio_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a portfolio item to a portfolio
     * Adds a new portfolio item to an existing portfolio. 
     * @param {String} portfolioId The Portfolio ID
     * @param {module:model/AddPortfolioItem} addPortfolioItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addPortfolioItemToPortfolio(portfolioId, addPortfolioItem) {
      return this.addPortfolioItemToPortfolioWithHttpInfo(portfolioId, addPortfolioItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an order item to an order in pending state
     * Adds an order item to an order in pending state 
     * @param {String} orderId The Order ID
     * @param {module:model/OrderItem} orderItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addToOrderWithHttpInfo(orderId, orderItem) {
      let postBody = orderItem;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling addToOrder");
      }

      // verify the required parameter 'orderItem' is set
      if (orderItem === undefined || orderItem === null) {
        throw new Error("Missing the required parameter 'orderItem' when calling addToOrder");
      }


      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an order item to an order in pending state
     * Adds an order item to an order in pending state 
     * @param {String} orderId The Order ID
     * @param {module:model/OrderItem} orderItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addToOrder(orderId, orderItem) {
      return this.addToOrderWithHttpInfo(orderId, orderItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new order
     * Creates a new order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    createOrderWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new order
     * Creates a new order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    createOrder() {
      return this.createOrderWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new portfolio
     * Adds a portfolio. 
     * @param {module:model/Portfolio} portfolio Parameters needed to add a Portfolio
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Portfolio} and HTTP response
     */
    createPortfolioWithHttpInfo(portfolio) {
      let postBody = portfolio;

      // verify the required parameter 'portfolio' is set
      if (portfolio === undefined || portfolio === null) {
        throw new Error("Missing the required parameter 'portfolio' when calling createPortfolio");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new portfolio
     * Adds a portfolio. 
     * @param {module:model/Portfolio} portfolio Parameters needed to add a Portfolio
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Portfolio}
     */
    createPortfolio(portfolio) {
      return this.createPortfolioWithHttpInfo(portfolio)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new portfolio item
     * Adds a name and description for a portfolio item and returns the newly created portfolio item. 
     * @param {module:model/CreatePortfolioItem} createPortfolioItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItem} and HTTP response
     */
    createPortfolioItemWithHttpInfo(createPortfolioItem) {
      let postBody = createPortfolioItem;

      // verify the required parameter 'createPortfolioItem' is set
      if (createPortfolioItem === undefined || createPortfolioItem === null) {
        throw new Error("Missing the required parameter 'createPortfolioItem' when calling createPortfolioItem");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PortfolioItem;

      return this.apiClient.callApi(
        '/portfolio_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new portfolio item
     * Adds a name and description for a portfolio item and returns the newly created portfolio item. 
     * @param {module:model/CreatePortfolioItem} createPortfolioItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItem}
     */
    createPortfolioItem(createPortfolioItem) {
      return this.createPortfolioItemWithHttpInfo(createPortfolioItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing portfolio
     * Deletes the portfolio specified by the ID. 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyPortfolioWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyPortfolio");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing portfolio
     * Deletes the portfolio specified by the ID. 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyPortfolio(id) {
      return this.destroyPortfolioWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing portfolio item
     * Deletes the portfolio item based on portfolio item ID passed 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyPortfolioItemWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyPortfolioItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/portfolio_items/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing portfolio item
     * Deletes the portfolio item based on portfolio item ID passed 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyPortfolioItem(id) {
      return this.destroyPortfolioItemWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all portfolio items from a specific portfolio
     * Gets all portfilio items in the portfolio specified by the given ID. 
     * @param {String} portfolioId The Portfolio ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItemsCollection} and HTTP response
     */
    fetchPortfolioItemsWithPortfolioWithHttpInfo(portfolioId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling fetchPortfolioItemsWithPortfolio");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioItemsCollection;

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/portfolio_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all portfolio items from a specific portfolio
     * Gets all portfilio items in the portfolio specified by the given ID. 
     * @param {String} portfolioId The Portfolio ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItemsCollection}
     */
    fetchPortfolioItemsWithPortfolio(portfolioId, opts) {
      return this.fetchPortfolioItemsWithPortfolioWithHttpInfo(portfolioId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of items in a given order
     * Gets a list of items associated with an order. 
     * @param {String} orderId The Order ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderItemsCollection} and HTTP response
     */
    listOrderItemsWithHttpInfo(orderId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling listOrderItems");
      }


      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderItemsCollection;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a list of items in a given order
     * Gets a list of items associated with an order. 
     * @param {String} orderId The Order ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderItemsCollection}
     */
    listOrderItems(orderId, opts) {
      return this.listOrderItemsWithHttpInfo(orderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of orders
     * Gets a list of orders associated with the logged in user. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrdersCollection} and HTTP response
     */
    listOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersCollection;

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of orders
     * Gets a list of orders associated with the logged in user. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrdersCollection}
     */
    listOrders(opts) {
      return this.listOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all portfolio items
     * Gets a list of portfolio items. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItemsCollection} and HTTP response
     */
    listPortfolioItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioItemsCollection;

      return this.apiClient.callApi(
        '/portfolio_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all portfolio items
     * Gets a list of portfolio items. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItemsCollection}
     */
    listPortfolioItems(opts) {
      return this.listPortfolioItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List portfolios
     * Gets a list of portfolios. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfoliosCollection} and HTTP response
     */
    listPortfoliosWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfoliosCollection;

      return this.apiClient.callApi(
        '/portfolios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List portfolios
     * Gets a list of portfolios. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfoliosCollection}
     */
    listPortfolios(opts) {
      return this.listPortfoliosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of progress messages in an item
     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages. 
     * @param {String} orderItemId The Order Item ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgressMessagesCollection} and HTTP response
     */
    listProgressMessagesWithHttpInfo(orderItemId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling listProgressMessages");
      }


      let pathParams = {
        'order_item_id': orderItemId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgressMessagesCollection;

      return this.apiClient.callApi(
        '/order_items/{order_item_id}/progress_messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a list of progress messages in an item
     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages. 
     * @param {String} orderItemId The Order Item ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgressMessagesCollection}
     */
    listProgressMessages(orderItemId, opts) {
      return this.listProgressMessagesWithHttpInfo(orderItemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.
     * Gets the provider control parameters for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProviderControlParameters} and HTTP response
     */
    listProviderControlParametersWithHttpInfo(portfolioItemId) {
      let postBody = null;

      // verify the required parameter 'portfolioItemId' is set
      if (portfolioItemId === undefined || portfolioItemId === null) {
        throw new Error("Missing the required parameter 'portfolioItemId' when calling listProviderControlParameters");
      }


      let pathParams = {
        'portfolio_item_id': portfolioItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderControlParameters;

      return this.apiClient.callApi(
        '/portfolio_items/{portfolio_item_id}/provider_control_parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.
     * Gets the provider control parameters for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProviderControlParameters}
     */
    listProviderControlParameters(portfolioItemId) {
      return this.listProviderControlParametersWithHttpInfo(portfolioItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets all service plans for a specific portfolio item; requires a connection to the topology service.
     * Gets all service plans for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServicePlan>} and HTTP response
     */
    listServicePlansWithHttpInfo(portfolioItemId) {
      let postBody = null;

      // verify the required parameter 'portfolioItemId' is set
      if (portfolioItemId === undefined || portfolioItemId === null) {
        throw new Error("Missing the required parameter 'portfolioItemId' when calling listServicePlans");
      }


      let pathParams = {
        'portfolio_item_id': portfolioItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServicePlan];

      return this.apiClient.callApi(
        '/portfolio_items/{portfolio_item_id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets all service plans for a specific portfolio item; requires a connection to the topology service.
     * Gets all service plans for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServicePlan>}
     */
    listServicePlans(portfolioItemId) {
      return this.listServicePlansWithHttpInfo(portfolioItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group
     * Fetch share information about a portfolio 
     * @param {String} portfolioId The Portfolio ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ShareInfo>} and HTTP response
     */
    shareInfoWithHttpInfo(portfolioId) {
      let postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling shareInfo");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShareInfo];

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/share_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group
     * Fetch share information about a portfolio 
     * @param {String} portfolioId The Portfolio ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ShareInfo>}
     */
    shareInfo(portfolioId) {
      return this.shareInfoWithHttpInfo(portfolioId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Share a portfolio with one or more groups with specific permission
     * Share a Portfolio with one or more groups with specific permissions 
     * @param {String} portfolioId The Portfolio ID
     * @param {module:model/SharePolicy} sharePolicy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    sharePortfolioWithHttpInfo(portfolioId, sharePolicy) {
      let postBody = sharePolicy;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling sharePortfolio");
      }

      // verify the required parameter 'sharePolicy' is set
      if (sharePolicy === undefined || sharePolicy === null) {
        throw new Error("Missing the required parameter 'sharePolicy' when calling sharePortfolio");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Share a portfolio with one or more groups with specific permission
     * Share a Portfolio with one or more groups with specific permissions 
     * @param {String} portfolioId The Portfolio ID
     * @param {module:model/SharePolicy} sharePolicy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    sharePortfolio(portfolioId, sharePolicy) {
      return this.sharePortfolioWithHttpInfo(portfolioId, sharePolicy)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets an individual order item from a given order
     * Gets an order item associated with an order. 
     * @param {String} orderId The Order ID
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderItem} and HTTP response
     */
    showOrderItemWithHttpInfo(orderId, id) {
      let postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling showOrderItem");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showOrderItem");
      }


      let pathParams = {
        'order_id': orderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderItem;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets an individual order item from a given order
     * Gets an order item associated with an order. 
     * @param {String} orderId The Order ID
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderItem}
     */
    showOrderItem(orderId, id) {
      return this.showOrderItemWithHttpInfo(orderId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific portfolio
     * Gets the portfolio specified by the portfolio ID. 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Portfolio} and HTTP response
     */
    showPortfolioWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showPortfolio");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific portfolio
     * Gets the portfolio specified by the portfolio ID. 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Portfolio}
     */
    showPortfolio(id) {
      return this.showPortfolioWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a specific portfolio item
     * Gets a specific portfolio item based on the portfolio item ID passed 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItem} and HTTP response
     */
    showPortfolioItemWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showPortfolioItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioItem;

      return this.apiClient.callApi(
        '/portfolio_items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a specific portfolio item
     * Gets a specific portfolio item based on the portfolio item ID passed 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItem}
     */
    showPortfolioItem(id) {
      return this.showPortfolioItemWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit a given order
     * Returns an updated order. 
     * @param {String} orderId The Order ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    submitOrderWithHttpInfo(orderId) {
      let postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling submitOrder");
      }


      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/orders/{order_id}/submit_order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Submit a given order
     * Returns an updated order. 
     * @param {String} orderId The Order ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    submitOrder(orderId) {
      return this.submitOrderWithHttpInfo(orderId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unshare a portfolio from one or more groups with specific permission
     * Unshare a Portfolio with one or more groups with specific permissions 
     * @param {String} portfolioId The Portfolio ID
     * @param {module:model/UnsharePolicy} unsharePolicy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unsharePortfolioWithHttpInfo(portfolioId, unsharePolicy) {
      let postBody = unsharePolicy;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling unsharePortfolio");
      }

      // verify the required parameter 'unsharePolicy' is set
      if (unsharePolicy === undefined || unsharePolicy === null) {
        throw new Error("Missing the required parameter 'unsharePolicy' when calling unsharePortfolio");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/unshare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unshare a portfolio from one or more groups with specific permission
     * Unshare a Portfolio with one or more groups with specific permissions 
     * @param {String} portfolioId The Portfolio ID
     * @param {module:model/UnsharePolicy} unsharePolicy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unsharePortfolio(portfolioId, unsharePolicy) {
      return this.unsharePortfolioWithHttpInfo(portfolioId, unsharePolicy)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit an existing portfolio
     * Returns the edited portfolio. 
     * @param {String} id ID of the resource
     * @param {module:model/Portfolio} portfolio Parameters needed to update a Portfolio
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Portfolio} and HTTP response
     */
    updatePortfolioWithHttpInfo(id, portfolio) {
      let postBody = portfolio;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolio");
      }

      // verify the required parameter 'portfolio' is set
      if (portfolio === undefined || portfolio === null) {
        throw new Error("Missing the required parameter 'portfolio' when calling updatePortfolio");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit an existing portfolio
     * Returns the edited portfolio. 
     * @param {String} id ID of the resource
     * @param {module:model/Portfolio} portfolio Parameters needed to update a Portfolio
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Portfolio}
     */
    updatePortfolio(id, portfolio) {
      return this.updatePortfolioWithHttpInfo(id, portfolio)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
