/**
 * Catalog API
 * This API gets and orders catalog items from different cloud sources.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrderItem from '../model/OrderItem';
import OrderItemsCollection from '../model/OrderItemsCollection';
import OrdersCollection from '../model/OrdersCollection';
import Portfolio from '../model/Portfolio';
import PortfolioItem from '../model/PortfolioItem';
import PortfolioItemsCollection from '../model/PortfolioItemsCollection';
import PortfoliosCollection from '../model/PortfoliosCollection';
import ProgressMessagesCollection from '../model/ProgressMessagesCollection';
import ProviderControlParameters from '../model/ProviderControlParameters';
import ServicePlan from '../model/ServicePlan';
import ShareInfo from '../model/ShareInfo';

/**
* Users service.
* @module api/UsersApi
* @version 0.1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add an order item to an order in pending state
     * Adds an order item to an order in pending state 
     * @param {String} orderId The Order ID
     * @param {module:model/OrderItem} orderItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addToOrderWithHttpInfo(orderId, orderItem) {
      let postBody = orderItem;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling addToOrder");
      }

      // verify the required parameter 'orderItem' is set
      if (orderItem === undefined || orderItem === null) {
        throw new Error("Missing the required parameter 'orderItem' when calling addToOrder");
      }


      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an order item to an order in pending state
     * Adds an order item to an order in pending state 
     * @param {String} orderId The Order ID
     * @param {module:model/OrderItem} orderItem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addToOrder(orderId, orderItem) {
      return this.addToOrderWithHttpInfo(orderId, orderItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all portfolio items from a specific portfolio
     * Gets all portfilio items in the portfolio specified by the given ID. 
     * @param {String} portfolioId The Portfolio ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItemsCollection} and HTTP response
     */
    fetchPortfolioItemsWithPortfolioWithHttpInfo(portfolioId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling fetchPortfolioItemsWithPortfolio");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioItemsCollection;

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/portfolio_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all portfolio items from a specific portfolio
     * Gets all portfilio items in the portfolio specified by the given ID. 
     * @param {String} portfolioId The Portfolio ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItemsCollection}
     */
    fetchPortfolioItemsWithPortfolio(portfolioId, opts) {
      return this.fetchPortfolioItemsWithPortfolioWithHttpInfo(portfolioId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of items in a given order
     * Gets a list of items associated with an order. 
     * @param {String} orderId The Order ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderItemsCollection} and HTTP response
     */
    listOrderItemsWithHttpInfo(orderId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling listOrderItems");
      }


      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderItemsCollection;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a list of items in a given order
     * Gets a list of items associated with an order. 
     * @param {String} orderId The Order ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderItemsCollection}
     */
    listOrderItems(orderId, opts) {
      return this.listOrderItemsWithHttpInfo(orderId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of orders
     * Gets a list of orders associated with the logged in user. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrdersCollection} and HTTP response
     */
    listOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersCollection;

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of orders
     * Gets a list of orders associated with the logged in user. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrdersCollection}
     */
    listOrders(opts) {
      return this.listOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all portfolio items
     * Gets a list of portfolio items. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItemsCollection} and HTTP response
     */
    listPortfolioItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioItemsCollection;

      return this.apiClient.callApi(
        '/portfolio_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all portfolio items
     * Gets a list of portfolio items. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItemsCollection}
     */
    listPortfolioItems(opts) {
      return this.listPortfolioItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List portfolios
     * Gets a list of portfolios. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfoliosCollection} and HTTP response
     */
    listPortfoliosWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfoliosCollection;

      return this.apiClient.callApi(
        '/portfolios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List portfolios
     * Gets a list of portfolios. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfoliosCollection}
     */
    listPortfolios(opts) {
      return this.listPortfoliosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of progress messages in an item
     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages. 
     * @param {String} orderItemId The Order Item ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProgressMessagesCollection} and HTTP response
     */
    listProgressMessagesWithHttpInfo(orderItemId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'orderItemId' is set
      if (orderItemId === undefined || orderItemId === null) {
        throw new Error("Missing the required parameter 'orderItemId' when calling listProgressMessages");
      }


      let pathParams = {
        'order_item_id': orderItemId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgressMessagesCollection;

      return this.apiClient.callApi(
        '/order_items/{order_item_id}/progress_messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a list of progress messages in an item
     * Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages. 
     * @param {String} orderItemId The Order Item ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProgressMessagesCollection}
     */
    listProgressMessages(orderItemId, opts) {
      return this.listProgressMessagesWithHttpInfo(orderItemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.
     * Gets the provider control parameters for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProviderControlParameters} and HTTP response
     */
    listProviderControlParametersWithHttpInfo(portfolioItemId) {
      let postBody = null;

      // verify the required parameter 'portfolioItemId' is set
      if (portfolioItemId === undefined || portfolioItemId === null) {
        throw new Error("Missing the required parameter 'portfolioItemId' when calling listProviderControlParameters");
      }


      let pathParams = {
        'portfolio_item_id': portfolioItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderControlParameters;

      return this.apiClient.callApi(
        '/portfolio_items/{portfolio_item_id}/provider_control_parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.
     * Gets the provider control parameters for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProviderControlParameters}
     */
    listProviderControlParameters(portfolioItemId) {
      return this.listProviderControlParametersWithHttpInfo(portfolioItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets all service plans for a specific portfolio item; requires a connection to the topology service.
     * Gets all service plans for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServicePlan>} and HTTP response
     */
    listServicePlansWithHttpInfo(portfolioItemId) {
      let postBody = null;

      // verify the required parameter 'portfolioItemId' is set
      if (portfolioItemId === undefined || portfolioItemId === null) {
        throw new Error("Missing the required parameter 'portfolioItemId' when calling listServicePlans");
      }


      let pathParams = {
        'portfolio_item_id': portfolioItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServicePlan];

      return this.apiClient.callApi(
        '/portfolio_items/{portfolio_item_id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets all service plans for a specific portfolio item; requires a connection to the topology service.
     * Gets all service plans for a portfolio item. 
     * @param {String} portfolioItemId The Portfolio Item ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServicePlan>}
     */
    listServicePlans(portfolioItemId) {
      return this.listServicePlansWithHttpInfo(portfolioItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group
     * Fetch share information about a portfolio 
     * @param {String} portfolioId The Portfolio ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ShareInfo>} and HTTP response
     */
    shareInfoWithHttpInfo(portfolioId) {
      let postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling shareInfo");
      }


      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShareInfo];

      return this.apiClient.callApi(
        '/portfolios/{portfolio_id}/share_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group
     * Fetch share information about a portfolio 
     * @param {String} portfolioId The Portfolio ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ShareInfo>}
     */
    shareInfo(portfolioId) {
      return this.shareInfoWithHttpInfo(portfolioId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets an individual order item from a given order
     * Gets an order item associated with an order. 
     * @param {String} orderId The Order ID
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderItem} and HTTP response
     */
    showOrderItemWithHttpInfo(orderId, id) {
      let postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling showOrderItem");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showOrderItem");
      }


      let pathParams = {
        'order_id': orderId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderItem;

      return this.apiClient.callApi(
        '/orders/{order_id}/order_items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets an individual order item from a given order
     * Gets an order item associated with an order. 
     * @param {String} orderId The Order ID
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderItem}
     */
    showOrderItem(orderId, id) {
      return this.showOrderItemWithHttpInfo(orderId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific portfolio
     * Gets the portfolio specified by the portfolio ID. 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Portfolio} and HTTP response
     */
    showPortfolioWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showPortfolio");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific portfolio
     * Gets the portfolio specified by the portfolio ID. 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Portfolio}
     */
    showPortfolio(id) {
      return this.showPortfolioWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a specific portfolio item
     * Gets a specific portfolio item based on the portfolio item ID passed 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PortfolioItem} and HTTP response
     */
    showPortfolioItemWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showPortfolioItem");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioItem;

      return this.apiClient.callApi(
        '/portfolio_items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets a specific portfolio item
     * Gets a specific portfolio item based on the portfolio item ID passed 
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PortfolioItem}
     */
    showPortfolioItem(id) {
      return this.showPortfolioItemWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
